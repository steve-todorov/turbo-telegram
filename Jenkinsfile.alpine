@Library('jenkins-shared-libraries') _

pipeline {
    agent {
        label "alpine:docker"
    }
    options {
        buildDiscarder logRotator(artifactDaysToKeepStr: '', artifactNumToKeepStr: '50', daysToKeepStr: '', numToKeepStr: '1000')
        timeout(time: 2, unit: 'HOURS')
        disableResume()
        durabilityHint 'PERFORMANCE_OPTIMIZED'
        disableConcurrentBuilds()
        skipDefaultCheckout()
        skipStagesAfterUnstable()
    }
    stages {
        stage('Node') {
            steps {
                nodeInfo("docker")
                checkout scm
            }
        }
        stage('base') {
            when {
                anyOf {
                    triggeredBy cause: "UserIdCause"
                    changeset "images/alpine/Dockerfile.alpine"
                }
            }
            steps {
                script {
                    docker.build('strongboxci/alpine:base', '-f images/alpine/Dockerfile.alpine --no-cache .')
                }
            }
        }
        stage('jdk8') {
            when {
                anyOf {
                    // should run upon manual build.
                    triggeredBy cause: "UserIdCause"
                    changeset "images/alpine/Dockerfile.alpine"
                    changeset "images/alpine/jdk8/Dockerfile.alpine.*"
                }
            }
            steps {
                script {
                    def files = sh(returnStdout: true, script: '''find ./images/alpine -mindepth 2 -type f -name "*Dockerfile*" | sort | xargs''')
                    println files

                    files.split(" ").each {
                        println it
                        def match = (it =~ /(.*)\\/Dockerfile\.(\w+)(\.(.+))?/)
                        if (match.find()) {
                            def DISTRIBUTION = match.group(2)
                            def TAG = match.group(4) ? match.group(4) : 'base'
                            def IMAGE = "strongboxci/$DISTRIBUTION:$TAG"
                        } else {
                            println "Something went wrong and we could not properly parse ${f} - skipping"
                        }

                        println "Building image: ${IMAGE}"

                        docker.build($IMAGE, '-f ${it} --no-cache .')
                    }
                }
                echo "jdk test"
            }
        }
        stage('build-tools') {
            when {
                anyOf {
                    changeset "Dockerfile.alpine"
                    changeset "images/jdk/Dockerfile.alpine.jdk8"
                    changeset "images/build-tools/**"
                }
            }
            steps {
                echo "build-tools test"
            }
        }
    }
}
